#+OPTONS: ^:nil
* 顺序程序设计
** 常量
1. 整型常量
   #+BEGIN_EXAMPLE
   1000, 0, -345 ...
   #+END_EXAMPLE
2. 实型常量
   #+BEGIN_EXAMPLE
   十进制小数形式: 123.456, 0.345, -56.79 ...
   指数形式: 12.34e3, -346.87e-25
   #+END_EXAMPLE
3. 字符常量
   #+BEGIN_EXAMPLE
   普通字符: 'a', 'Z', '3', '?' ...
   转义字符: '\n', '\t' ...
   #+END_EXAMPLE
4. 字符串常量
   #+BEGIN_EXAMPLE
   "boy", "123", ...
   #+END_EXAMPLE
5. 符号常量
   #+BEGIN_SRC c
   # define PI 3.1416
   #+END_SRC

** 变量
变量代表一个有名字的,具有特定属性的存储单元,它用来存放数据.
在程序运行期间,变量的值是可以改变的.
** 常变量
#+BEGIN_SRC c
const int a=3;
/*
  常变量和符号常量的区别:
  常变量有类型,占用存储单元;符号常量没有类型,不占用存储单元
  事实上,符号常量用于代表一个字符串,在预编译时进行字符替换,
  在预编译后,就不存在了
*/
#+END_SRC
** 标识符
用于对变量,符号常量名,函数,数组,类型等命名的字符序列称为标识符.
标识符只能由字母,数字和下划线组成,第一个字符必须是字母或下划线.
** 数据类型
所谓类型,就是对数据分配存储单元的安排,不同类型,其存储单元长度和数据存储形式不同
** 整型数据
1. int
   #+BEGIN_EXAMPLE
   存储长度: 依赖编译器,一般是一个机器字长

   存储形式: 用整数的补码形式存放
   #+END_EXAMPLE
   #+BEGIN_EXAMPLE
   一个正数的补码是此数的二进制形式
   一个负数的补码是其绝对值的二进制按位取反再加1
   #+END_EXAMPLE
2. short int
   #+BEGIN_EXAMPLE
   存储长度: 依赖编译器,不长于int的存储长度

   存储形式: 同int
   #+END_EXAMPLE
3. long int
   #+BEGIN_EXAMPLE
   存储长度: 依赖编译器,不短于int的存储长度

   存储形式: 同int
   #+END_EXAMPLE
4. long long int
   #+BEGIN_EXAMPLE
   存储长度: 依赖编译器,不短于long int的存储长度

   存储形式: 同int
   #+END_EXAMPLE
5. char
   #+BEGIN_EXAMPLE
   存储长度: 1字节

   存储形式: ASCII字符集的基本集包括了127个字符,用7个二进位就可以表示,
            字节中的第一位置为0
   #+END_EXAMPLE
5. signed && unsigned + [整型类型]
   #+BEGIN_EXAMPLE
   有符号整型存储单元中最高位代表符号(0正1负)

   无符号整型全部二进位都用作存放数值本身,
   无符号的char类型的第一位不再固定为0,多出来的空间可以存储扩展字符集

   默认是有符号类型
   #+END_EXAMPLE
** 浮点型数据
规范化指数形式:指数形式表示法中小数点前的数字为0,小数点后第一位数字不为0的表示形式
1. float
  #+BEGIN_EXAMPLE
  存储长度: 4字节

  存储形式: n位表示小数部分(包括符号) m位表示指数部分 m+n=32. m和n由编译器决定
           小数部分占位越多,精度越高;指数部分占位越多,表示范围越大
  #+END_EXAMPLE
2. double
  #+BEGIN_EXAMPLE
  存储长度: 8字节

  存储形式: n位表示小数部分(包括符号) m位表示指数部分 m+n=64. m和n由编译器决定
           小数部分占位越多,精度越高;指数部分占位越多,表示范围越大
  #+END_EXAMPLE
3. long double
  #+BEGIN_EXAMPLE
  存储长度: 依赖编译器

  存储形式: n位表示小数部分(包括符号) m位表示指数部分 m+n=128. m和n由编译器决定
           小数部分占位越多,精度越高;指数部分占位越多,表示范围越大
  #+END_EXAMPLE
** 常量的类型
+ 字符常量
  只要是单引号括起的单个字符或转移字符就是字符常量
+ 整形常量
  不带小数点的数值是整形常量.
  根据数值所在的范围确定具体的整形类型,规则 *依赖编译器* .
+ 浮点型常量
  以小数形式或指数形式出现的实数是浮点型常量,按 *双精度* 处理
** 运算符和表达式
*** 注意事项
+ 两个实数相除的结果是双精度实数
+ 两个整数相除的结果为整数,舍去小数部分.
  如果有一个为负值,舍入的方向 *依赖编译器* ,多数编译器采取"向零取整"规则
+ %的操作正能是整数
+ 赋值运算符"="是右结合性
  #+BEGIN_SRC c
  a=b=c; //先把c的值赋给b,再把b的值赋给a
  #+END_SRC
#+BEGIN_EXAMPLE
问题

i+++j的结果会怎样?
#+END_EXAMPLE
*** 不同类型混合运算
1. float型和double型,将float型转换为double型,结果是double型
2. int型和double型,将int型转换为double型,结果是double型
3. char性和int型,把字符的ASCII码与int型数据进行运算
** c语句
*** 赋值语句
#+BEGIN_SRC c
一些例子

a=(b=5)        //b=5,a=5; 整个表达式的值是5

a=(b=4)+(c=6)  //b等于4,c等于6,a等于10; 整个表达式的值是10

(a=b)=3*4      //error (a=b)是赋值表达式,不能做左值
#+END_SRC
**** 赋值过程中的类型转换
1. 浮点型赋给整型: 先舍去小数部分,然后赋给整型变量
2. 整型赋给浮点型: 数值不变,但以浮点数形式存储
3. double型赋给float型: 截取6~7位有效数字.若值超出float型变量的范围,则溢出.
4. float型赋给double型: 数值不变,扩展有效位数
5. 字符型赋给整形: 将字符的ASCII码赋给整形变量
6. 占字节多的整形赋给占字节少的整形: 只将其低字节原封不动地送到被赋值的变量
** 数据的输入输出
printf
#+BEGIN_SRC c
printf(参数1,参数2,参数3,...,参数n)
/*
参数1是格式控制字符串,参数2~参数n是需要输出的数据
常用格式字符:
d 有符号十进制整数
c 字符
s 字符串
f 浮点数
*/
#+END_SRC
scanf
#+BEGIN_SRC c
scanf(参数1,参数2,参数3,...,参数n)
/*
参数1是格式控制字符串,参数2~参数n是变量的地址
scanf("%d a=%f,c=%c",&a,&b,&c);
其输入必须形如"20 a=3.14,c=A",
即输入的内容必须与控制字符串完全一致,
只有控制字符被真实的字符取代了.
*/
#+END_SRC
putchar
#+BEGIN_SRC c
putchar(c)  //输出一个字符
#+END_SRC
getchar
#+BEGIN_SRC c
getchar()   //输入一个字符,按enter结束输入

/*
若是连续2个getchar(),应该输入2个字符,然后enter结束输入
而非每输入一个字符按一次enter,否则enter也会被当做输入字符
*/
a=getchar();
b=getchar();
...
#+END_SRC

* 选择结构程序设计
** if语句
#+BEGIN_SRC c
1.
if(表达式) 语句1

2.
if(表达式) 
    语句1
else
    语句2

3.
if(表达式1) 语句1
else if(表达式2) 语句2
else if(表达式3) 语句3
...
else if(表达式m) 语句m
else 语句m+1
#+END_SRC
** 关系运算符和关系表达式
关系表达式的值是一个逻辑值,"真"或"假".用1表示"真",用0表示"假"
#+BEGIN_SRC c
a=3;
b=2;
d=a>b;   //d的值为1
#+END_SRC
** 逻辑运算符和逻辑表达式
+ 优先级 !高于&&高于||
  !高于算数运算符, &&和||低于算数运算符
+ *短路现象*:
   在逻辑表达式中,只有在必须执行下一个逻辑运算符才能求出表达式的值时,才执行该运算符.
** switch语句
switch语句是多分支选择语句
#+BEGIN_SRC c
switch(表达式)
{
case 常量1: 语句1
case 常量2: 语句2
...
case 常量n: 语句n
default:    语句n+1
}
#+END_SRC
说明:
1. switch后的表达式的值应为整数类型(包括字符型)
2. case后面跟一个常量或常量表达式,每一个常量必须互不相同
3. case标号只起标记作用,找到匹配的标号入口后,就从此标号开始执行下去,可以使用break终止执行
4. 多个case标号可以共用一组执行语句
   #+BEGIN_SRC c
   case 'A':
   case 'B':
   case 'C': ...
   #+END_SRC

* 循环结构程序设计
** while语句
#+BEGIN_SRC c
while(表达式) 语句
#+END_SRC
while循环的特点是:先判断条件表达式,后执行循环体语句.
只要循环条件为真,就执行循环表达式.
** do-while语句
#+BEGIN_SRC c
do
    语句
while(表达式);
#+END_SRC
+ do-while的特点是:先无条件执行循环体,然后判断循环条件是否成立,若成立再执行循环体.
+ 当while后面的表达式第1次的值为"真"时,while和do-while得到的结果相同
** for语句
#+BEGIN_SRC c
for(表达式1; 表达式2; 表达式3)
    语句
/*
表达式1: 设置初始条件. 只执行一次
表达式2: 循环条件表达式,用于判断是否继续循环. 每次执行循环体前执行
表达式3: 作为循环的调整. 在执行完循环体后执行
*/

//等价的while表达式
表达式1;
while(表达式2)
{
    语句
    表达式3
}
#+END_SRC
** 改变循环执行的状态
+ 用break语句提前终止循环
+ 用continue语句体检结束本次循环

* 数组
1. 数组是一组有序数据的集合
2. 用一个数组名和下表可以唯一确定数组中的元素
3. 数组用的每一个元素都属于同一类型
** 一维数组
*** 定义
#+BEGIN_SRC c
类型 数组名[常量表达式]
/*
方括号中的常量表达式用来指定数组中元素的个数
*/

//举例
int a[10];
#+END_SRC
#+BEGIN_SRC c
一种现象

/*如果在被调用的函数(不包括主函数)中定义数组,
其长度可是是变量或非常量表达式*/
void func(int n)
{
   int a[2*n];
   ...
}
#+END_SRC
*** 引用数组元素
#+BEGIN_SRC c
数组名[下标]
#+END_SRC
*** 初始化
1. 在定义时对全部数组元素赋初值
   #+BEGIN_SRC c
   int a[10]={0,1,2,3,4,5,6,7,8,9};
   int a[]={0,1,2,3,4,5,6,7,8,9};    //可以不指定数组长度
   #+END_SRC
2. 只给数组中一部分元素赋初值
   #+BEGIN_SRC c
   int a[10]={0,1,2,3,4};  //只给前5个元素赋初值,后5个自动赋为0
   #+END_SRC
3. 全部元素赋为同一个初值
   #+BEGIN_SRC c
   int a[10]={0};
   #+END_SRC
** 二维数组
*** 定义
#+BEGIN_SRC c
类型符 数组名[常量表达式][常量表达式];

/*
二维数组中元素排列顺序是按行存放的,
内存中先顺序存放第1行的元素,接着在存放第2行的元素,依此类推
*/
#+END_SRC
*** 引用数组元素
#+BEGIN_SRC c
数组名[下标][下标]
#+END_SRC
*** 初始化
1. 全部元素初始化
   #+BEGIN_SRC c
   int a[3][4]={{1,2,3,4}, {5,6,7,8}, {9,10,11,12}};
   int a[3][4]={1,2,3,4,5,6,7,8,9,10,11,12};   //第一种更清晰
   //可以不指定第1维的长度,第2维不能省
   int a[][4]={{1,2,3,4}, {5,6,7,8}, {9,10,11,12}};
   int a[][4]={1,2,3,4,5,6,7,8,9,10,11,12};
   #+END_SRC
2. 部分元素初始化
   #+BEGIN_SRC c
   int a[3][4]={{1}, {5}, {9}}; //1,0,0,0; 5,0,0,0; 9,0,0,0
   int a[3][4]={{1}, {5,6}};    //1,0,0,0; 5,6,0,0; 0,0,0,0
   #+END_SRC
** 字符数组
*** 定义
#+BEGIN_SRC c
char c[10];
#+END_SRC
*** 初始化
#+BEGIN_SRC c
//全部初始化
char c[10]={'a','b','c','d','e','f','g','h','i','j'};
char c[]={'a','b','c','d','e','f','g','h','i','j'};
char c[]={"abcdefghij"};  //长度为11,而不是10,会自动添加一个'\0'
char c[]="abcdefghij";    //同上

//部分初始化
char c[10]={'a','b','c'}; //值初始化字符数组中前面的元素,其余自动为空字符'\0'
#+END_SRC
*** 字符串
+ 在c语言中,将字符串作为字符数组处理
+ 以'\0'作为结束标识符的原因是需要直到字符串的有效长度
+ c语言中,使用字符数组存储字符串常量时会自动添加一个'\0'作为结束符
*** 字符数组的输入输出
#+BEGIN_SRC c
输出

char c[]="China";
printf("%s\n",c);
/*
1. 输出遇到'\0'就结束
2. 输出的字符中不包括结束符'\0'
*/

输入

scanf("%s",c)

char str1[5],str2[5],str3[5];
scanf("%s%s%s",str1,str2,str3);
/*
1. 输入的字符串应短于已定义的字符数组的长度
2. 如果利用一个scanf函数输入多个字符串,则应在输入是以空格分隔
3. 数组中未被赋值的元素的值自动置'\0'
*/
#+END_SRC
*** 字符串处理函数
+ puts
  将字符串输出到终端,在输出时将字符串结束符'\0'转换成'\n',即自动换行
  #+BEGIN_SRC c
  char str[] = "hello\nworld";
  puts(str);
  #+END_SRC
+ gets
  从终端输入一个字符串到字符数组
  #+BEGIN_SRC c
  gets(str);
  #+END_SRC
+ strcat
  字符串连接函数
  #+BEGIN_SRC c
  strcat(字符数组1, 字符数组2)
  /*
    把字符串2连接到字符串1的后面
    1. 结果放在字符数组1中
    2. 字符数组1必须足够大,以容纳连接后的新字符串
  /*
  #+END_SRC
+ strcpy和scrncpy
  字符串赋值函数
  #+BEGIN_SRC c
  strcpy(字符数组1, 字符数组2/字符串2)
  strncpy(字符数组1, 字符数组2/字符串2,n)
  /*
    把字符串2复制到字符数组1中
    把字符串2中前n个字符复制到字符数组1中
    1. 字符数组1的长度应大于等于字符串2的长度
  */
  #+END_SRC
+ strcmp
  字符串比较函数
  #+BEGIN_SRC c
  strcmp(字符串1, 字符串2)
  /*
    如果 字符串1=字符串2 ,返回0
    如果 字符串1>字符串2 ,返回正
    如果 字符串1<字符串2 ,返回负
  */
  #+END_SRC
+ strlen
  测字符串长度的函数
  #+BEGIN_SRC c
  strlen(字符数组)
  /*
    返回字符串的实际长度(不包括'\0')
  */
  #+END_SRC
+ strlwr
  转换为小写的函数
  #+BEGIN_SRC c
  strlwr(字符串)
  #+END_SRC
+ strupr
  转换为大写的函数
  #+BEGIN_SRC c
  strupr(字符串)
  #+END_SRC

* 函数
** 定义函数
#+BEGIN_SRC c
类型名 函数名(形参列表)
{
   函数体
}
#+END_SRC
** 调用函数
#+BEGIN_SRC c
函数名(实参列表)
#+END_SRC
** 函数声明
+ 如果调用库函数,应该在文件开头用#include将库包含进来
+ 如果使用用户自己定义的函数,且该函数的位置在主调函数的后面,应该在主调函数中对被调函数作声明
  #+BEGIN_SRC c
  函数类型 函数名(参数类型1 参数名1,参数类型2 参数名2,...,参数类型n 参数名n);
  函数类型 函数名(参数类型1,参数类型2,...,参数类型n);
  #+END_SRC
  函数定义和函数声明不是同一回事.
  1. 函数定义是指对函数功能的确立,包括指定函数名,函数值类型,形参及其函数体等,他是一个完整的,独立的函数单位.
  2. 函数声明的作用则是把函数的名字,函数类型以及形参类型,个数和顺序通知编译器,以便 *在调用该函数时系统按此声明进行对照检查*
** 函数的嵌套调用
c语言中函数不能嵌套定义,但可以嵌套调用.
** 函数的递归调用
直接或间接地调用该函数本身,称为函数的递归调用
** 数组作为函数参数
用数组名作函数实参时,向形参(数组名或指针变量)传递的是数组首元素的地址
+ 实参数组和形参数组类型应一致,如不一致,结果将出错
+ *编译器将实参数组的首元素地址传给形参数组名*
+ 形参数组首元素和实参数组首元素具有同一地址,指向同一存储单元.
+ *形参数组可以不指定大小*,在定义数组时在数组后面跟一个空的方括号
#+BEGIN_SRC c
int main()
{
    float score[] = {1,2,3,4};
    average(score);
    return 0;
}

float average(float array[])
{
    ...
}
#+END_SRC
*** 多维数组
+ 可以用多维数组名作函数的实参和形参.
+ 在被调函数中对形参数组定义时
  1. 可以指定每一维的大小
  2. 也可以省略第一维的大小
+ c语言编译器不检查第一维的大小
  #+BEGIN_SRC c
  float average(float array[3][10])
  {
      ...
  }
  或
  float average(float array[][10])
  {
      ...
  }
  #+END_SRC
#+BEGIN_EXAMPLE
为什么形参可以指定为float array[][10],
而不能指定为float array[3][]?

因为二维数组在内存中是按行存放的,因此,在定义二维数组时,
必须指定列数,即一行中包含几个元素
#+END_EXAMPLE
** 局部变量和全局变量
*** 局部变量
+ 在一个函数内部定义的变量只在本函数范围内有效
+ 在一个复合语句内部定义的变量只在本复合语句范围内有效
+ *形参也是局部变量*
*** 全局变量
+ 在函数之外定义的变量是全局变量
+ 全局变量的有效范围从定义变量的位置开始到源文件结束
+ 全局变量在程序的全部执行过程中都占用存储单元,而不是仅在需要时才开辟单元
** 变量的存储方式和生存期
存储变量的两种不同方式
1. 静态存储方式
   在程序运行期间由系统分配固定的存储空间
2. 动态存储方式
   在程序运行期间根据需要进行动态的分配存储空间
内存存储空间划分
1. 程序区
2. 静态存储区
3. 动态存储区
变量的存储类别
1. 自动变量
   #+BEGIN_EXAMPLE
   [auto+局部变量] 或 [局部变量]
   关键字: auto
   存储空间: 动态存储区
   初值: 初值不确定
   说明: 在调用函数时,系统给自动变量分配存储空间,
   在函数调用结束时,自动释放这些存储空间
   #+END_EXAMPLE
2. 静态局部变量
   #+BEGIN_EXAMPLE
   [static+局部变量]
   关键字: static
   存储空间: 静态存储区
   初值: 在编译时自动赋初值0(对数值型变量)或'\0'(对字符变量)
   说明: 静态局部变量在函数调用结束后任然存在
   #+END_EXAMPLE
3. 寄存器变量
   #+BEGIN_EXAMPLE
   [register+局部变量]
   关键字: register
   存储空间: 寄存器
   说明: 有一些变量使用频繁,为提高执行效率,允许将局部变量的值存放在cup寄存器中
   现在优化的编译系统能够识别使用频繁的变量,自动将这些变量放在寄存器中,
   而不需要程序设计者指定
   #+END_EXAMPLE
4. 外部变量
   #+BEGIN_EXAMPLE
   [全局变量]
   关键字: 无
   存储空间: 静态存储区
   说明: 外部变量的有效范围限于定义处到文件结束.
   如果需要在外部变量定义之前引用该外部变量,应该在引用之前用extern
   对该变量作外部变量声明,表示把该外部变量的作用域扩展到此位置.
   如果需要在某个文件中引用在其他文件中定义的外部变量,同样需要作外部变量声明
   #+END_EXAMPLE
5. 静态外部变量
   #+BEGIN_EXAMPLE
   [static+全局变量]
   关键字: static
   存储空间: 静态存储区
   说明: 如果不希望外部变量被其他文件引用(即仅限于本文件中使用),
   在外部变量前加一个static
   #+END_EXAMPLE
** 变量的声明和定义
+ 把建立存储空间的声明称定义
+ 把不需要建立存储空间的声明称声明
+ [extern+变量名]是声明,除此之外,对变量的声明都是定义
** 内部函数和外部函数
+ 内部函数: 只能被本文件中其他函数调用的函数
  #+BEGIN_SRC c
  static 类型名 函数名(形参表);
  #+END_SRC
+ 外部函数: 可以被其他文件调用的函数
  #+BEGIN_SRC c
  extern 类型名 函数名(形参表);
  类型名 函数名(形参表);          //默认是外部函数
  #+END_SRC

* 指针
+ 直接访问:
  *变量名与变量的地址一一对应*,直接用变量名对变量的存储单元进行访问
+ 间接访问:
  先通过存放 *变量i地址的变量p* 得到变量i的地址,然后对变量i的存储单元其进行访问
+ *指针*: 一个变量的地址称为该变量的指针
+ *指针变量*: 一个专门用来存放指针(地址)的变量
** 指针变量
*** 定义指针变量
#+BEGIN_SRC c
类型名 * 指针变量名;
#+END_SRC
#+BEGIN_SRC c
例子

int * pointer_1, * pointer_2;
float * pointer_3 = &a;
#+END_SRC
+ 指针类型由基本类型和星号组成.在定义指针变量时必须指定基类型
+ 指针变量中只能存放地址(指针),不能将一个整数赋给一个指针变量
#+BEGIN_EXAMPLE
为什么在定义指针变量时必须指定基类型?

如果想通过指针引用一个变量,只知道地址是不够的,必须还要直到数据所占字节数.
#+END_EXAMPLE
*** 引用指针变量
#+BEGIN_SRC c
//引用指针变量的值
p = &a;
printf("%o",p);

//引用指针变量指向的变量
*p = 1;
#+END_SRC
*** 指针变量作函数参数
注意: 在函数调用时,将实参变量的值传递给形参变量,永远采取 *值传递* 的方式
因此指针变量作函数参数时,实参传递给形参的是 *指针变量的值*,即一个指针(地址)
** 通过指针引用数组 
*** 数组元素的指针
#+BEGIN_SRC c
int a[3] = {1,2,3};
int *p;
p=&a[2];
#+END_SRC
数组名代表 *数组元素中首元素的地址*
#+BEGIN_SRC c
p=&a[0];
等价于
p=a;
#+END_SRC
*** 指针的运算
*当指针指向数组元素时*,允许对指针进行如下运算
1. 加/减一个整数
2. 自加/减
3. 两个指针相减(两指针必须指向同一数组中的元素)
4. 注意:
   #+BEGIN_EXAMPLE
   1. p+i并非将p的值(地址)简单地加i,而是加上i个数组元素所占用的字节数
   2. p2-p1的结果,其意义是p2所指的元素与p1所指的元素之间差多少个元素,
      代表了p2与p1的相对距离
   #+END_EXAMPLE
*** 通过指针引用数组
1. 下标法
   a[i] p[i] 数组名是指针常量,固定为数组首元素地址;指针变量可以指向数组中任意元素
2. 指针法
   *(a+i) *(p+i)
3. 注意:
  #+BEGIN_SRC c
  *p++
  //由于++和*同优先级,结合方向自右而左,因此等价于
  *(p++)
  //先引用p的值,实现*p,然后再使p自增1
  #+END_SRC
*** 数组名作函数参数
+ c编译器将形参数组名作为指针变量处理,这也解释了为什么形参数组可以不指定元素个数.
  #+BEGIN_SRC c
  fun(int arr[])
  等价于
  fun(int * arr)
  #+END_SRC
+ 实参数组名固定为数组首元素地址,是指针常量,而形参数组名是一个指针变量
| 实参         | 形参         |
|--------------+--------------|
| 字符数组名   | 字符数组名   |
| 字符数组名   | 字符指针变量 |
| 字符指针变量 | 字符数组名   |
| 字符指针变量 | 字符指针变量 |
*** TODO 通过指针引用多维数组
*** 指针与数组的区别
1. 声明方式
   #+BEGIN_SRC c
   int a[];
   int * p;

   func(int a[]);
   func(int * p);
   #+END_SRC
2. 初始化方式
   #+BEGIN_SRC c
   int arr[]={1,2,3};
   int * arr={1,2,3};       //gcc warning
   例外
   char string[]="abcd";
   char * string="abcd";    //ok
   #+END_SRC
3. 编译时为数组分配若干存储单元,为指针变量分配一个存储单元
4. 数组名是指针常量,常量不能作左值.
   #+BEGIN_SRC c
   char a[10];
   char * p;

   a="abcd";     //error!! 数组名是指针常量
   p="abcd";
   #+END_SRC
5. 字符数组中的元素值是可以改变的,
   字符指针变量指向的字符串常量中的内容是不可以改变的
   #+BEGIN_SRC c
   char a[] = "abcd";
   a[0]='e';               //ok

   char * p = "abcd";      //指向字符串常量
   p[0]='f';               //error!!

   char a[] = "abcd";
   char * p = a;           //指向字符数组
   p[0]='f';               //ok
   #+END_SRC
** 通过指针引用字符串
*** 字符串的引用方式
可以用两种方法引用一个字符串
#+BEGIN_SRC c
字符数组
char string[]="abcd";

字符指针变量
char * string="abcd";     //string指向"abcd"的第一个字符'a'的地址
#+END_SRC
*** 字符指针变量与其他类型指针变量的区别
1. 初始化
   #+BEGIN_SRC c
   int arr[]={1,2,3};
   char string[]="abcd";

   int * arr={1,2,3};       //gcc warning
   char * string="abcd";    //ok
   #+END_SRC
2. 输出
   #+BEGIN_SRC c
   int * a;
   char * p;

   printf("%s\n",p);       //输出的是整个字符串的内容,直到遇到'\0'
   printf("%d\n",a);       //gcc warning
   printf("%s\n",a);       //gcc warning
   #+END_SRC
** 指向函数的指针
+ 编译系统为函数代码分配了存储空间,这段存储空间的起始地址(入口地址)称为这个函数的指针.
+ 定义指向函数的指针变量
  #+BEGIN_SRC c
  类型名 (* 指针变量名)(函数参数列表);
  #+END_SRC
+ 指针变量指向的函数的返回值,参数数量,类型,顺序必须和定义中的一致
+ 函数名与其代码段的入口地址一一对应,给函数指针变量赋值时,给出的是函数名(不带参数)
+ 用函数指针变量调用函数,只需用(*p)代替函数名即可
+ 举例
  #+BEGIN_SRC c
  int main()
  {
      int max(int,int);      //函数声明
      int (*p)(int,int);     //定义指向函数的指针变量p
      p=max;                 //使p指向max
      int a=1,b=2,c;
      c=(*p)(a,b);           //通过指针变量调用max函数
  }
  #+END_SRC
+ 函数指针变量的一个重要用途是把函数地址作为参数传递到其他函数
  #+BEGIN_SRC c
  void fun(int (* x1)(int), int (* x2)(int,int))
  {
    int a,b,i=3,j=5;
    a=(*x1)(i);
    b=(* x2)(i,j);
  }
  #+END_SRC
** 返回指针值的函数
一个函数可以返回整型值,字符值,实型值,也可以返回指针类型的数据
#+BEGIN_SRC c
类型名 * 函数名(参数列表);
#+END_SRC
#+BEGIN_EXAMPLE
区分
int  *a (int x, int y)
int (*a)(int x, int y)

第一种情况,a的两侧分别为*运算符和()运算符,()优先级高于*,
a先与()结合,表示a是函数,其返回值是指针

第二种情况,a先与*结合,表示p是一个指针,然后在与后面的()结合,
()表示是函数,即指针变量p指向函数
#+END_EXAMPLE
** 指针数组和多重指针
*** 指针数组
其元素均为指针类型数据的数组,称为指针数组
#+BEGIN_SRC c
类型名 * 数组名[数组长度];
#+END_SRC
#+BEGIN_SRC c
举例

char * name[] = {"hello","zoe","chao"};
#+END_SRC
#+BEGIN_EXAMPLE
区分

int  *p [4];
int (*p)[4];

第一种情况,[]比*优先级高,p先与[4]结合,p表示一个数组,
数组中元素的类型是指针类型

第二种情况,p首先与*结合,p表示一个指针,
[]表示数组,p指针变量指向的是一个数组
#+END_EXAMPLE
*** 指向指针的指针
#+BEGIN_SRC c
类型名 ** 指针变量名;

如
char **p;
*运算符是右结合性,因此**p相当于 *(*p),*p表示p是指针变量,指向char*类型的指针变量
#+END_SRC
#+BEGIN_SRC c
举例

int main()
{
    char * name[]={"hello","zoe","chao"};
    char **p;
    int i;
    for(i=0;i<3;i++)
    {
        p=name+i;
        printf("%s\n",*p);
    }
}
#+END_SRC
*** 指针数组作main函数的形参
#+BEGIN_SRC c
int main(int argc, char * argv[])

/*
argc表示参数的个数,argv是一个char*数组,其中每一个元素指向命令行中的一个字符串
注意参数包括命令本身
*/
#+END_SRC
** 动态内存分配
c语言允许动态内存分配,在需要时随时开辟,不需要时随时释放.
+ 自动变量分配在内存中的动态存储区,称为栈
+ 动态分配内存分配在内存中的自由存储区,称为堆
*** 建立内存动态分配
+ malloc
  #+BEGIN_SRC c
  void * malloc(unsigned int size);

  /*
  在内存的动态存储区中分配一个长度为size的连续空间.
  */
  #+END_SRC
+ calloc
  #+BEGIN_SRC c
  void * calloc(unsigned n, unsigned size);

  /*
  在内存的动态存储区中分配n个长度为size的连续空间
  用calloc可以为一维数组开辟动态存储空间
  */
  #+END_SRC
+ free
  #+BEGIN_SRC c
  void free(void * p);

  /*
  释放指针变量p所指向的动态空间,
  p应是最近一次调用calloc或malloc函数的返回值
  */
  #+END_SRC
+ realloc
  #+BEGIN_SRC c
  void realloc(void *p, unsigned int size);

  /*
  用realloc函数将p所指向的动态空间的大小改变为size
  p的值不变
  */
  #+END_SRC
*** void指针类型
c99允许使用基类型为void的指针类型
+ void指针类型不指向确定的类型
+ 将void指针赋值给另一指针变量时由系统对它进行类型转换

* 用户自己建立数据类型
** 定义和使用结构体变量
#+BEGIN_SRC c
struct 结构体名
{
    成员列表
};
#+END_SRC
#+BEGIN_SRC c
//举例

struct Student
{
    int num;
    char name[20];
    char sex;
    int age;
};
#+END_SRC
*** 定义结构体类型变量
1. 先声明结构体类型,再定义该类型的变量
   #+BEGIN_SRC c
   struct Student student1,student2;
   #+END_SRC
2. 在声明类型的同时定义变量
   #+BEGIN_SRC c
   struct 结构体名
   {
       成员列表
   } 变量名列表;
   #+END_SRC
   #+BEGIN_SRC c
   struct Student
   {
        int num;
        char name[20];
        char sex;
        int age;
   } student1,student2;
   #+END_SRC
3. 不指定类型名而直接定义结构体类型变量
   #+BEGIN_SRC c
   struct
   {
       成员列表
   } 变量名列表;
   #+END_SRC
*** 初始化和引用结构体变量
+ 在定义结构体变量时,可以对它初始化
  #+BEGIN_SRC c
  struct Student b={123,"zoe","m",25};
  
  //c99中允许对某一成员初始化
  struct Student b={.name="zoe"};
  /*
  其他未被指定初始化的数值类型成员被初始化为0,
  字符类型成员被初始化为'\0',
  指针类型成员被初始化为NULL
  */
  #+END_SRC
+ 可以引用结构体变量中的成员
  #+BEGIN_SRC c
  结构体变量名.成员名
  #+END_SRC
+ 对结构体变量的成员可以像普通变量一样进行各种运算
+ 同类结构体变量可以相互赋值
** 结构体数组
+ 结构体数组的每个元素都是一个结构体类型的数据
+ 定义结构体数组
  #+BEGIN_SRC c
  //1.
  struct 结构体名
  {
      成员列表
  }数组名[数组长度];

  //2. 先声明一个结构体类型
  结构体类型 数组名[数组长度];
  #+END_SRC
+ 初始化结构体数组
  #+BEGIN_SRC c
  结构体类型 数组名[数组长度] = {初值列表};
  #+END_SRC
  #+BEGIN_SRC c
  struct Person
  {
      char name[20];
      int count;
  }leader[3]={{"zoe",0},{"wch",0},{"ldy",0}};

  struct Person
  {
      char name[20];
      int count;
  }leader[3]={"zoe",0,"wch",0,"ldy",0};
  #+END_SRC
** 结构体指针
#+BEGIN_SRC c
struct Student * pt;
#+END_SRC
+ 结构体指针就是指向结构体变量的指针
+ 如果p指向一个结构体变量stu,以下3种用法等价
  1. stu.成员名
  2. (*p).成员名
  3. p->成员名
+ 将一个结构体变量的值传递给另一个函数,有3种方法
  1. 用结构体变量的成员作参数
  2. 用结构体变量作实参
     这种传递方式在空间和时间上开销较大
  3. 用指向结构体变量的指针作实参
** 共用体类型
+ 定义共用体类型
#+BEGIN_SRC c
union 共用体名
{
    成员列表
} 变量列表;
#+END_SRC
#+BEGIN_SRC c
//例子

//1.
union Data
{
    int i;
    char ch;
    float f;
}a,b,c;

//2. 已经定义了共用体类型那个
union Data a,b,c;

//3.
union
{
    int i;
    char ch;
    float f;
}a,b,c;
#+END_SRC
+ 引用共用体变量
#+BEGIN_SRC c
union Data a;
a.i = 16;
a.ch = 'a';
a.f =1.5;
#+END_SRC
+ 同一个内存段可以用来存放几种不同类型的成员,但在每一瞬时只能存放其中一个成员,而不是同时存放几个.
+ 共用体内存长度等于最长的成员的长度
+ 可以对共用体变量初始化,但初始化表中只能有一个常量
  #+BEGIN_SRC c
  union Data a = {16}
  union Data a = {16,'a',1.5};    //error!!
  union Data a = {.ch='j'};       //C99允许
  #+END_SRC
+ 共用体变量的地址和它的各成员的地址都是同一地址
  #+BEGIN_EXAMPLE
  &a.i, &a.c, &a.f都是同一值
  #+END_EXAMPLE
+ 不能对共用体变量名赋值,也不能企图引用变量名来得到一个值
  #+BEGIN_SRC c
  union Data a;
  a=1;              //error!!
  int m=a;          //error!!

  union Data b=a;   //C99允许同类型共用体变量互相赋值
  #+END_SRC
** 使用枚举类型
如果一个变量只有几种可能的值,则可以定义为枚举类型
#+BEGIN_SRC c
enum 枚举名 {枚举元素列表};
#+END_SRC
#+BEGIN_SRC c
//例子

//1.
enum Weekday{sun,mon,tue,wed,thu,fri,sat} workday,weekend;
workday=mon;      //workday和weekend是枚举变量,其值只能是定义的7个值之一
weekend=sun;

//2. 已经定义了枚举类型
enum Weekday workday,weekend;   

//3.
enum {sun,mon,tue,wed,thu,fri,sat} workday,weekend;
#+END_SRC
+ c编译器对枚举类型的枚举元素按常量处理,故称枚举常量
+ 每一个枚举元素都代表一个整数,c编译器按定义时的顺序默认其值是0,1,2,3...
+ 可以认为地指定枚举元素的数值
  #+BEGIN_SRC c
  enum Weekday{sun=7,mon=1,tue,wed,thu,fri,sat} workday,weekend;
  #+END_SRC
+ 枚举元素可用于判断比较
** 用typedef声明新类型名
+ 定义新类型名的方法是
  1. 按定义变量的方法写出定义体
  2. 将变量名换成新类型名
  3. 在最前面加typedef
+ 用typedef只是对已经存在的类型指定一个新的类型名,而没有创造新的类型.
#+BEGIN_SRC c
//命名一个新的类型名代表已有类型
typedef int Count;

//命名一个新的类型名代表结构体类型
typedef struct{
    int month;
    int day;
    int year;
}Date;

//命名一个新的类型名代表数组类型
typedef int Num[100];     //Num代表 int[100] 类型
Num a;                    //定义a为整形数组,它有100个元素

//命名一个新的类型名代表指针类型
typedef char* String;     //Sting代表 char* 类型
String p,s[10];           //定义p为字符指针变量,s为字符指针数组

//命名一个新的类型名代表指向函数的指针类型
typedef int (* Pointer)();      //Pointer代表指向函数的指针类型
Pointer p1,p2;                  //p1,p2为Pointer类型的指针变量
#+END_SRC

* 文件的输入输出
** c文件基础
*** 文件流
c对文件的存取是以字符(字节)为单位的,输入输出数据流的开始和结束仅受程序控制而
不受物理符号(如回车换行符)控制,这就增加了处理的灵活性,这种文件称为流式文件.
*** ASCII文件和二进制文件
数据文件可分为ASCII文件和二进制文件.
用ASCII码形式输出时字节与字符一一对应,一个字节代表一个字符,但占用存储空间较多,
而且要花费转换时间(二进制形式与ASCII码间的转换).
用二进制形式输出数值,可以节省外存空间和转换时间,把内存中的存储单元中的内容
原封不动地输出到磁盘上,此时一个字节并不一定代表一个字符,如果程序运行过程中有的
数据文件需要保存在外部介质上,以便在需要时再输入到内存,一般用二进制文件比较方便.
*** 文件缓冲区
ANSI C标准采用"缓冲文件系统"处理数据文件,缓冲文件系统是指系统自动地在内存区
为程序中每一个正在使用的文件开辟一个文件缓冲区.
从内存向磁盘输出数据必须先送到内存中的缓冲区,装满缓冲区后才一起送到磁盘去.
从磁盘向内存读入数据,则一次从磁盘文件将一批数据输入到内存缓冲区,然后再从缓冲区逐个地将数据送到程序数据区(给程序变量).
缓冲区大小由各个具体的c编译系统确定.
*** 文件类型指针
每个被使用的文件都在内存中开辟一个相应的 *文件信息区*,用来存放文件的有关信息(如文件名字,状态等).
这些信息保存在一个结构体变量中,如
#+BEGIN_SRC c
typedef struct
{
  short level;             //缓冲区满或空的程度
  unsigned flags;          //文件状态标志
  char fd;                 //文件描述符
  short bsize;             //缓冲区大小
  unsigned char* buffer;   //缓冲区位置
  unsigned char* curp;     //指针当前指向
  ...
}FILE;
#+END_SRC
每个FILE类型变量对应一个文件的信息区.
一般设置一个指向FILE类型变量的指针变量,通过它来引用这些FILE类型变量.
#+BEGIN_SRC c
FILE * fp;
#+END_SRC
** 打开与关闭文件
+ *打开文件* 是指为文件建立相应的信息区(用来存放有关文件的信息)和文件缓冲区(用来暂时存放输入输出的数据)
+ *关闭文件* 是指撤销文件信息区和文件缓冲区
+ fopen
  #+BEGIN_SRC c
  fopen(文件名,使用文件方式);
  
  //例子
  FILE * fp;
  fp=fopen("a1","r");
  #+END_SRC
  #+CAPTION: 使用文件的方式
  #+ATTR_HTML: border="2" rules="all" frame="all"
  | 方式 | 涵义                          | 如果指定文件不存在 |
  |------+-------------------------------+--------------------|
  | r    | 读,打开一个已存在文本文件     | 出错               |
  | w    | 写,打开一个文本文件           | 新建文件           |
  | a    | 写,向已存在文本文件追加       | 出错               |
  |------+-------------------------------+--------------------|
  | r+   | 读写,打开一个已存在文本文件   | 出错               |
  | w+   | 读写,打开一个文本文件         | 新建文件           |
  | a+   | 读写,打开一个已存在文本文件   | 出错               |
  |------+-------------------------------+--------------------|
  | rb   | 读,打开一个已存在二进制文件   | 出错               |
  | wb   | 写,打开一个二进制文件         | 新建文件           |
  | ab   | 写,向已存在二进制文件追加     | 出错               |
  |------+-------------------------------+--------------------|
  | rb+  | 读写,打开一个已存在二进制文件 | 出错               |
  | wb+  | 读写,打开一个二进制文件       | 新建文件           |
  | ab+  | 读写,打开一个已存在二进制文件 | 出错               |
  如果不能实现打开的任务,fopen将返回一个空指针NULL
  #+BEGIN_SRC c
  //打开文件常用方式
  if((fp=fopen("file1","r"))==NULL)
  {
    //错误处理
  }
  #+END_SRC
+ fclose
  #+BEGIN_SRC c
  fclose(文件指针);

  //例子
  fclose(fp);
  #+END_SRC
** 顺序读写数据文件
*** 读写字符
#+BEGIN_SRC c
fgetc(fp)     //从fp指向的文件读入一个字符
fputc(ch,fp)  //把字符ch写到文件指针变量fp所指向的文件中
#+END_SRC
*** 读写字符串
#+BEGIN_SRC c
fgets(str,n,fp)   //从fp指向的文件读入一个长度为(n-1)的字符串到字符数组str中
fputs(str,fp)     //把str所指向的字符串写到文件指针变量fp所指向的文件中
#+END_SRC
*** 用格式化方式读写文件
#+BEGIN_SRC c
fprintf(文件指针,格式字符串,输出列表);
fscanf(文件指针,格式字符串,输入列表);
#+END_SRC
*** 用二进制方式读写文件
fwrite向文件写一个数据块
#+BEGIN_SRC c
fread(buffer, size, count, fp);
fwrite(buffer, size, count, fp);

/*
buffer:
一个地址,
对fread来说是用来存放文件读入的数据的存储区的地址,
对fwrite来说,是要把此地址开始的存储区中的数据向文件输出

size: 要读写的字节数

count: 要读写多少个数据项(每个数据项长度为size)

fp:FILE类型指针
*/
#+END_SRC
#+BEGIN_SRC c
//例子

//假设arr是一个float类型数组名,
fread(arr, 4, 10, fp);  //从fp指向的文件中读入10个4字节数据,存储到数组arr中

//假设stu是有40个元素的struct Student类型变量
for(i=0;i<40;i++)
    fwrite(&stud[i],sizeof(struct Student),1,fp);
#+END_SRC
** 随机读写数据文件
+ 为了对读写进行控制,系统为每个文件设置了一个文件读写位置标记,用来指示"接下来要读写的下一个字符的位置"
+ 在对文件进行顺序读写时,文件位置标记指向文件开头,
  - 如果对文件进行读操作,文件位置标记向后移一个位置,直到遇到文件尾
  - 如果对文件进行写操作,则每写完一个数据,文件位置标记向后移一个位置
*** rewind
用rewind函数使文件位置标记指向文件开头
#+BEGIN_SRC c
rewind(fp)
#+END_SRC
*** fseek
用fseek函数改变文件位置标记
#+BEGIN_SRC c
fseek(文件类型指针, 位移量, 起始点)

/*
位移量是long型的,指以起始点为基点,向前移动的字节数
*/
#+END_SRC
#+CAPTION: 起始点
#+ATTR_HTML: border="2" rules="all" frame="all"
#+OPTIONS: ^:nil
| 起始点       | 名字     | 用数字代表 |
|--------------+----------+------------|
| 文件开始位置 | SEEK_SET | 0          |
| 文件当前位置 | SEEK_CUR | 1          |
| 文件末尾位置 | SEEK_END | 2          |
*** ftell
用ftell函数测定未见位置标记的当前位置
#+BEGIN_SRC c
long i;
i = ftell(fp);
#+END_SRC
** 文件读写出错检测
*** ferror
在调用各种输入输出函数时,如果出现错误,除了函数返回值有所反映外,还可以用ferror函数检查
#+BEGIN_SRC c
ferror(fp)
#+END_SRC
如果ferror返回值为0,表示未出错,如果返回非零值,表示出错.
*** clearerr
只要出现文件读写错误标志,它就一直保留,直到对同一文件调用clearerr函数,或rewind函数,或任何其他输入输出函数
